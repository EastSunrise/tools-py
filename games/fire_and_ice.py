import time

from pykeyboard import PyKeyboard


class Level:
    """
    Each level of the game.
    :param w0 the initial angular speed, degrees/second
    :param dws the data of every block, the degree of angle if the angular speed doesn't change
    or tuple of the degree and the change of the speed instead.
    """

    def __init__(self, ready, w0, dws: list):
        self.__intervals = [5, ready]
        w = w0
        for dw in dws:
            if isinstance(dw, tuple):
                w *= dw[1]
                d = dw[0]
            else:
                d = dw
            if w < 0:
                self.__intervals.append((360 - d) / (-w))
            else:
                self.__intervals.append(d / w)

    def run(self):
        keyboard = PyKeyboard()
        for i, interval in enumerate(self.__intervals):
            keyboard.tap_key(keyboard.space_key)
            print("{} sleep {} s".format(i, interval))
            time.sleep(interval)


LEVEL_DATA = [
    [
        2.3, 452,
        [
            180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
            180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 270, 90, 180, 180, 180, 180, 180, 180,
            180, 180, 180, 180, 180, 180, 180, 180, 270, 90, 180, 180, 180, 180, 180, 180, 180, 180, 180,
            180, 180, 180, 180, 180, 270, 90, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
            180, 180, 90, 270, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 90,
            270, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 90, 270, 90, 270, 180, 180,
            180, 180, 180, 180, 180, 180, 270, 90, 270, 90, 270, 90, 270, 90, 180, 180, 180, 180, 180, 180,
            180, 180, 180, 180, 180, 180, 90, 270, 90, 270, 180, 180, 180, 180, 180, 180, 180, 180, 270, 90,
            270, 90, 180, 180, 90, 270, (180, 0.25), 180, 180, 180, 180, 180, 180
        ]
    ],
    [
        2.1, 480,
        [
            180, 180, 180, 270, 180, 180, 180, 90, 180, 180, 180, 270, 180, 180, 180, 90, 180, 180, 180, 270,
            180, 180, 180, 90, 180, 180, 180, 180, 90, 180, 180, 270, 180, 180, 180, 270, 180, 180, 180, 90,
            180, 180, 180, 270, 180, 180, 180, 90, 180, 180, 180, 270, 180, 180, 180, 90, 180, 180, 180, 90,
            180, 180, 180, 270, (180, 0.25), 180, 180, 180, (180, 2), 180, 180, 180, (180, 2.01), 180, 180, 180,
            180, 180, 180, 180, 90, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
            180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 90, 180, 180, 180,
            270, 180, 180, 180, 90, 180, 180, 180, 270, 180, 180, 180, 90, 180, 180, 180, 270, 180, 180, 180,
            90, 180, 180, 180, 180, 90, 180, 180, 180
        ]
    ],
    [
        1.96, 542.2,
        [
            180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 270, 270, 180, 180, 180, 180, 180, 180, 180,
            90, 90, 180, 180, 180, 180, 180, 180, 180, 180, 180, 270, 270, 90, 90, 270, 270, 90, 90, 270, 270, 90,
            90, 180, 180, 180, 180, 270, 270, 90, 90, 270, 270, 90, 90, 270, 270, 90, 90, 180, 180, 180, 180, 90,
            270, 270, 90, 90, 270, 270, 90, 90, 270, 270, 90, 90, 270, 270, 90, 90, 270, 270, 90, 90, 270, 270, 90,
            90, 270, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 270, 270, 90, 90, 180, 180, 180, 180,
            270, 270, 90, 90, 180, 180, 180, 180, 270, 270, 90, 90, 180, 180, 180, 180, 270, 270, 90, 90, 180, 90,
            270, 180, 270, 270, 90, 90, 180, 90, 270, 180, 270, 270, 90, 90, 180, 90, 270, 180, 270, 270, 90, 90,
            180, 90, 270, 180, 270, 270, 180
        ]
    ],
    [
        3.5, 255,
        [
            120, 240, 180, 180, 120, 240, 180, 180, 120, 240, 180, 180, 120, 240, 180, 180, 120,
            120, 270, (180, 0.97), 120, 120, 270, (180, 0.98), 120, 120, 270, 180, 120, 120, 270,
            180, 180, 120, 120, 90, 180, (180, -1), 240, 240, 270, 180, (180, -1), 120, 120, 90,
            180, (180, -1.03), 240, 240, 270, 180, (180, -1), 120, 120, 90, 180, (180, -1), 240,
            240, 270, 180, (180, -0.97), 120, 120, 90, 180, (180, -1), 240, 240, 90,
            (180, 1.02), 300, 300, 240, 270, 180, 180, 300, 300, 240, 270, 180,
            (180, 0.98), 300, 300, 240, 270, 180, 180, 300, 300, 240, 270, 180,
            180, 300, 300, 240, 270, 180, (180, 1.02), 300, 300, 240, 270, 180,
            180, 300, 300, 240, 270, 180, 180, 300, 300, 240, 270, 180,
            (180, 0.26), 180, 180, 180, (90, 2), 260, 90, 270, 180, 180,
            (180, 2), 180, 180, 180, (180, 0.97), 240, 120, 180, 180, 240, 240, 270, 180,
            (180, -0.98), 120, 120, 90, 180, (180, -1), 240, 240, 270, 270, 270, 180,
            240, 120, 180, (180, 1.04), 240, 120, 180, 180, 240, 240, 270, 180,
            (180, -1), 120, 240, 90, 90, 180
        ]
    ],
    [
        2.1, 512,
        [
            180, 180, 180, 120, 180, 240, 180, 180, 120, 180, 240, 180,
            180, 120, 180, 240, 180, 180, 120, 240, 180, 180,
            180, 120, 180, 240, 180, 180, 120, 180, 240, 180,
            180, 120, 180, 240, 180, 180, 300, 60, 180, 180,
            180, 120, 180, 240, 180, 180, 120, 180, 240, 180,
            180, 120, 180, 240, 180, 180, 300, 60, 180, 180,
            180, 180, 180, 180, 180, 180, 300, 180, 60, 180,
            180, 180, 120, 180, 240, 180, 180, 120, 180, 240, 180,
            180, 120, 180, 240, 180, 180, 120, 240, 180, 180,
            180, 120, 180, 240, 180, 180, 300, 60, 180, 180,
            180, 120, 180, 240, 180, 180, 300, 60, 180, 180,
            180, 120, 180, 240, 180, 180, 120, 180, 240, 180,
            180, 120, 180, 240, 180, 180, 120, 60, 120, 180, 60, 180,
            180, 180, 180, 180, 180, 180, 180, 300, 180, 60, 180, 180,
            180, 120, 180, 240, 180, 180, 120, 180, 240, 180,
            180, 120, 180, 240, 180, 180, 120, 180
        ]
    ],
    [
        2, 527,
        [
            180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
            180, 90, 90, 90, 90, 180, 180, 180, 180, 180, 180, 180, 180, 90, 90, 270, 180, 270, 180,
            180, 90, 90, 270, 180, 270, 180, 180, 90, 90, 270, 180, 270, 180, 180, 90, 90, 270, 180,
            270, 180, 180, 90, 90, 270, 180, 270, 180, 180, 90, 90, 270, 180, 270, 180, 180, 90, 90,
            270, 180, 270, 180, 180, 90, 90, 270, 180, 180, 90, 180, 180, 90, 90, 270, 180, 270, 180,
            180, 90, 90, 270, 180, 270, 180, 180, 90, 90, 270, 180, 270, 180, 180, 90, 90, 270, 180,
            270, 180, 270, 90, 270, 90, 270, 90, 270, 90, 270, 90, 270, 90, 270, 90, 270, 90, 180,
            90, 90, 270, 180, 270, 180, 180, 90, 90, 270, 180, 270, 180, 90, 270, 90, 270, 90, 270,
            90, 270, 90, 270, 90, 270, 90, 270, 90, 270, 180, 90, 90, 270, 180, 270, 180, 180, 90, 90,
            270, 180, 270, 180, (180, 0.5), 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180, 180,
            180, 180, 180, (180, 2), 90, 180, 180, 180, 180, 270, 180, 180, 90, 180, 180, 180, 180, 180,
            90, 90, 90, 180, 90, 180, 180, 180, 180, 270, 180, 180, 90, 180, 180, 180, 180, 180, 90, 90,
            90, 180, 180, 90, 270, 180, 180, 90, 270, 180, 180, 90, 270, 180, 180, 90, 270, 180, 180, 90,
            270, 180, 180, 90, 270, 180, 180, 90, 180, 270, 180, 180, 270, 90, 90, 270, 270, 90, 90, 270,
            270, 90, 90, 270, 270, 90, 90, 270, 270, 90, 90, 270, 270, 90, 90, 270, 90, 90, 270, 180, 270,
            180, 180, 180, 90, 90, 270, 180, 270, 180, 180, 90, 90, 270, 180, 270, 180, 180, 90, 90, 270,
            180, 270, 180, 180, 90, 90, 270, 180, 270, 180, 180, 90, 90, 270, 180, 270, 180, 180, 90, 90,
            90, 180, 180, 180, 90, 180, 180, 90, 90, 90, 180, 180, 180, 90, 180, 180, 90, 90, 90, 180,
            180, 180, 90, 180, 180, 90, 90, 270, 180, 270, 180, 180
        ]
    ],
    [
        2.1, 481,
        [
            270, 270, (90, -1), 90, 180, 180, (270, -1), 270, (90, -1), 90, 180,
            180, (270, -1), 270, (90, -1), 90, 180, 270, 270, 90, 90, (270, -1), 270, 90, 270,
            180, 180, 180, 180, 180, 180, 270, 270, 270, 270,
            180, 180, 180, 180, 180, 180, 270, 270, 270, 270,
            180, 180, 180, 90, 90, 90, 90,
            180, 180, 180, 90, 90, 90, 90,
            180, 180, 180, 90, 180, 180, 90,
            180, 180, 180, (180, 0.333333), (180, 3), 180, 180, 180, 180, 180, 270, 270, (90, -1), 90,
            180, 180, 180, 180, 180, 180, (270, -1), 270, (90, -1), 90,
            180, 270, 270, 270, 270, 180, 180, 180,
            180, 270, 270, 270, 270, 180, 180,
            180, 270, 270, 270, 270, 270, 180, 180,
            180, 270, 270, 270, 270, 180, 270, (180, 0.3333333), (90, 3), 90, (270, -1), 270,
            (180, 1.005), 90, 90, 270, 270, (90, -1), 90,
            180, 270, 270, 90, 90, (270, -1), 270,
            180, 90, 90, 270, 270, (90, -1), 90,
            270, 90, (270, -1), 270, (90, -1), 90,
            180, 270, 270, 90, 90, (270, -1), 270,
            180, 90, 90, 270, 270, (90, -1), 90,
            180, 270, 270, 90, 90, (270, -1), 270, 180,
            180, 270, 270, 270, 180, 180, 270, 270, 270, 270, 180, 270,
            180, 180, 180, 270, 270, (90, -1), 90, (270, -1), 270, 180,
        ]
    ]
]


def run(number):
    data = LEVEL_DATA[number - 1]
    Level(data[0], data[1], data[2]).run()
